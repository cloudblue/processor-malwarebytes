import json
from dataclasses import dataclass
from typing import Dict, List, Optional

from connect_malwarebytes.connect import const


class ConfigurationError(Exception):
    def __init__(self, message: str, parameter: str):
        self.message = message
        self.parameter = parameter

        super().__init__(self.message)


class RatingPlanError(Exception):
    pass  # pragma: no cover


def search_param(params: List, id_: str) -> Dict:
    """Returns the parameter dict by its id"""
    try:
        return next(filter(lambda param: param['id'] == id_, params))
    except StopIteration:
        return None


def get_param_value(params: List, id_: str) -> str:
    """Returns the parameter value by its id"""
    if not params:
        return ''
    param = search_param(params, id_)
    return param.get('value') if param else ''


@dataclass
class RequestParser:
    """Request base"""
    request: Dict
    config: Dict

    @staticmethod
    def get_instance(request, config):
        """Dynamically resolves the request type"""
        if 'id' not in request:
            return None

        result = None
        if request['id'].startswith(const.ASSET_REQUEST_PREFIX):
            result = AssetRequest(request, config)
        elif request['id'].startswith(const.ASSET_DATA_PREFIX):
            result = AssetData(request, config)
        return result

    # Getters
    def id(self) -> str:
        return self.request['id']

    def external_id(self) -> str:
        return self.request['external_id']

    def creation_date(self) -> str:
        return self.request['events']['created']['at']

    def contract_id(self) -> str:
        return self.request['contract']['id']

    def request_type(self) -> str:
        return self.request['type']

    def status(self):
        return self.request['status']

    def set_status(self, status):
        self.request['status'] = status

    def set_reason(self, reason):
        self.request['reason'] = reason

    def params(self) -> List[Dict]:
        return self.request['params']

    def config_params(self) -> List[Dict]:
        return self.request['configuration']['params']

    def product_id(self) -> str:
        return self.request['product']['id']

    def provider_id(self) -> str:
        return self.request['connection']['provider']['id']

    def vendor_id(self) -> str:
        return self.request['connection']['vendor']['id']

    def environment(self) -> str:
        return self.request['connection']['type']

    def is_test_env(self) -> bool:
        return self.environment() in [const.TEST_ENV, const.PREVIEW_ENV]

    def update_parameter(self, param_id: str, value: str = '', value_error: str = None) -> None:
        parameter = search_param(self.params(), param_id)
        if value:
            parameter['value'] = value
        if value_error is not None:
            parameter['value_error'] = value_error

    # Params
    def group_id(self) -> str:
        return get_param_value(self.params(), const.GROUP_ID_PARAM)

    def user_id(self) -> str:
        return get_param_value(self.params(), const.USER_ID_PARAM)


class AssetRequest(RequestParser):
    """Parser for fulfillment/asset request (PR prefix)"""

    def __init__(self, request, config):
        super().__init__(request, config)
        self.asset = AssetData(self.request['asset'], config)

    def params(self) -> List[Dict]:
        return self.asset.params()

    def config_params(self) -> List[Dict]:
        return self.asset.config_params()

    def items(self) -> List[Dict]:
        return self.asset.items()

    def product_id(self) -> str:
        return self.asset.product_id()

    def provider_id(self) -> str:
        return self.asset.provider_id()

    def vendor_id(self) -> str:
        return self.asset.vendor_id()

    def environment(self) -> str:
        return self.asset.environment()

    def issuer_id(self) -> str:
        return self.asset.issuer_id()

    def tier1_id(self) -> str:
        return self.asset.tier1_id()

    def tier2_id(self) -> str:
        return self.asset.tier2_id()

    def asset_id(self) -> str:
        return self.asset.id()

    def asset_external_id(self) -> str:
        return self.asset.external_id()

    def asset_customer_external_id(self) -> str:
        return self.asset.customer_external_id()

    def asset_customer_name(self) -> str:
        return self.asset.customer_name()

    def asset_creation_date(self) -> str:
        return self.asset.creation_date()

    def asset_contract_id(self) -> str:
        return self.asset.contract_id()

    def generate_params_for_update(self) -> Dict:
        return {'asset': {'params': self.params()}}

    def get_item_by_global_id(self, global_id: str) -> Optional[Dict]:
        return next(iter([item for item in self.items() if item['global_id'] == global_id]), None)

    def get_items_with_value_excluding(self, key_value: str, exclude_id: str) -> List[Dict]:
        return [item for item in self.items() if
                int(item[key_value]) > 0 and item['global_id'] != exclude_id]

    def get_item_with_value_excluding(self, key_value: str, exclude_id: str) -> Optional[Dict]:
        return next(iter([item for item in self.items() if
                          int(item[key_value]) > 0 and item['global_id'] != exclude_id]), None)

    # Params
    def action_param(self) -> Dict:
        return search_param(self.params(), const.ACTION_PARAM)

    def action(self) -> str:
        return get_param_value(self.params(), const.ACTION_PARAM)

    def migration_group_id(self) -> str:
        return get_param_value(self.params(), const.MIGRATION_GROUPID_PARAM)

    def migration_token(self) -> str:
        return get_param_value(self.params(), const.MIGRATION_TOKEN_PARAM)

    def migration_info(self) -> str:
        try:
            return get_param_value(self.params(), const.MIGRATION_INFO_PARAM)
        except ConfigurationError:
            return False

    def migration_info_object(self) -> Dict:
        return json.loads(get_param_value(self.params(), const.MIGRATION_INFO_OBJECT))

    # Configuration Params
    def migration_validation_token(self) -> str:
        return get_param_value(self.config_params(), const.MIGRATION_VALIDATION_TOKEN)

    def host(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_HOST_KEY,
            const.PREVIEW_ENV: const.PREVIEW_HOST_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_HOST_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])

    def port(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_PORT_KEY,
            const.PREVIEW_ENV: const.PREVIEW_PORT_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_PORT_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])

    def username(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_USERNAME_KEY,
            const.PREVIEW_ENV: const.PREVIEW_USERNAME_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_USERNAME_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])

    def password(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_PASSWORD_KEY,
            const.PREVIEW_ENV: const.PREVIEW_PASSWORD_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_PASSWORD_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])

    def s3_endpoint_host(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_S3_ENDPOINT_HOST_KEY,
            const.PREVIEW_ENV: const.PREVIEW_S3_ENDPOINT_HOST_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_S3_ENDPOINT_HOST_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])

    def sso_endpoint_host(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_SSO_ENDPOINT_HOST_KEY,
            const.PREVIEW_ENV: const.PREVIEW_SSO_ENDPOINT_HOST_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_SSO_ENDPOINT_HOST_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])

    def sso_key(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_SSO_KEY,
            const.PREVIEW_ENV: const.PREVIEW_SSO_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_SSO_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])

    def migration_cancel_flag(self) -> bool:
        return get_param_value(self.config_params(), const.MIGRATION_CANCEL_FLAG)

    def subscription_activation_template_id(self) -> str:
        return get_param_value(self.config_params(), const.SUBSCRIPTION_ACTIVATION_TEMPLATE_ID_KEY)

    # Items
    def rating_plan_items(self) -> List[Dict]:
        return self.get_items_with_value_excluding(
            'quantity',
            self.config[const.QOS_LIMIT_ITEM_GLOBAL_ID])

    def rating_plan_item(self) -> Dict:
        return self.get_item_with_value_excluding(
            'quantity',
            self.config[const.QOS_LIMIT_ITEM_GLOBAL_ID])

    def rating_plan_value(self) -> int:
        item = self.rating_plan_item()
        return int(item['quantity']) if item else False

    def rating_plan_old_value(self) -> int:
        item = self.rating_plan_item()
        return int(item['old_quantity']) if item else False

    def rating_plan_id(self) -> str:
        item = self.rating_plan_item()
        return get_param_value(item['params'], const.RATING_PLAN_ID_KEY) if item else False

    def rating_plan_billing_type(self) -> str:
        item = self.rating_plan_item()
        return get_param_value(
            item['params'],
            const.RATING_BILLING_TYPE_KEY).lower() if item else False

    def is_reservation_rating_plan(self) -> bool:
        return self.rating_plan_billing_type() == const.RESERVATION_BILLING_TYPE.lower()

    def old_rating_plan_item(self) -> List[Dict]:
        return self.get_item_with_value_excluding(
            'old_quantity',
            self.config[const.QOS_LIMIT_ITEM_GLOBAL_ID])

    def old_rating_plan_value(self) -> int:
        item = self.old_rating_plan_item()
        return int(item['quantity']) if item else False

    def qos_limit(self) -> int:
        item = self.get_item_by_global_id(self.config[const.QOS_LIMIT_ITEM_GLOBAL_ID])

        return int(item['quantity']) if item else 0

    def old_qos_limit(self) -> int:
        item = self.get_item_by_global_id(self.config[const.QOS_LIMIT_ITEM_GLOBAL_ID])

        return int(item['old_quantity']) if item else 0

    def has_rating_plan_changed(self) -> bool:
        return self.rating_plan_item()['id'] != self.old_rating_plan_item()['id']

    def has_qos_limit_changed(self) -> bool:
        return self.qos_limit() != self.old_qos_limit()

    def get_item_by_sku_id(self, sku_id: str) -> Dict:
        if not sku_id:
            return {}
        for item in self.items():
            if sku_id in item['mpn']:
                return item
        return {}


class AssetData(RequestParser):
    """Parser for asset data (AS prefix)"""

    def issuer_id(self) -> str:
        return self.request['tiers']['customer']['events']['created']['by']['id']

    def customer_external_id(self) -> str:
        return self.request['tiers']['customer']['external_id']

    def customer_name(self) -> str:
        return self.request['tiers']['customer']['name']

    def tier1_id(self) -> str:
        return self.request['tiers']['tier1']['id']

    def tier2_id(self) -> str:
        return self.request['tiers']['tier2'].get('id', '')

    def items(self) -> List[Dict]:
        return self.request['items']

    def sso_endpoint_host(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_SSO_ENDPOINT_HOST_KEY,
            const.PREVIEW_ENV: const.PREVIEW_SSO_ENDPOINT_HOST_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_SSO_ENDPOINT_HOST_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])

    def sso_key(self) -> str:
        keys = {
            const.TEST_ENV: const.TEST_SSO_KEY,
            const.PREVIEW_ENV: const.PREVIEW_SSO_KEY,
            const.PRODUCTION_ENV: const.PRODUCTION_SSO_KEY}

        return get_param_value(self.config_params(), keys[self.environment()])
