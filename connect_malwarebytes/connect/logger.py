from logging import Logger, LoggerAdapter
from typing import List, Tuple, Union


def masked_fields(fields: Union[List[str], Tuple[str]]) -> None:
    global __masked_fields
    __masked_fields = tuple(fields)


class ExtensionLoggerAdapter(LoggerAdapter):
    """
    Wrapper around the EaaS logger
    Used to add extra fields to the message
    """
    def __init__(self, logger: Logger, extra: dict, request_id: str):
        self.request_id = request_id
        # mask header 'Authorization' and token value from an API response
        masked_fields(['Authorization', 'token'])
        super().__init__(logger, extra)

    def process(self, msg, kwargs):
        task_id = ''
        if 'task_id' in self.extra:
            task_id = '[{}] '.format(self.extra['task_id'])

        request_id = ''
        if self.request_id:
            request_id = '[{}] '.format(self.request_id)

        msg = f'{task_id}{request_id}{msg}'
        return super().process(msg, kwargs)
