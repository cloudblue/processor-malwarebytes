from xlsxwriter import Workbook

from connect_malwarebytes.connect import const


class WrongRatingEngineError(Exception):
    pass  # pragma: no cover


EXCEL_RECORDS_TAB = 'records'

EXCEL_COLUMN_RECORD_TITLES = [
    'record_id',
    'record_note',
    'item_search_criteria',
    'item_search_value',
    'asset_search_criteria',
    'asset_search_value',
    'start_time_utc',
    'end_time_utc',
    'category_id',
    'quantity',
    'item_name',
    'item_id',
    'item_mpn',
    'item_unit',
    'item_precision',
]

ID = 'id'
NOTE = 'note'
ITEM_SEARCH_CRITERIA = 'item_search_criteria'
ITEM_SEARCH_VALUE = 'item_search_value'
ASSET_SEARCH_CRITERIA = 'asset_search_criteria'
ASSET_SEARCH_VALUE = 'asset_search_value'
START_TIME = 'start_time'
END_TIME = 'end_time'
CATEGORY_ID = 'category_id'
QUANTITY = 'quantity'
ITEM_NAME = 'item_name'
ITEM_ID = 'item_id'
ITEM_MPN = 'item_mpn'
ITEM_UNIT = 'item_unit'


class UsageLine:

    def __init__(self):
        self.__dict__ = {}

    def to_dict(self):
        return self.__dict__

    def from_dict(self, data: dict):
        for key, value in data.items():
            setattr(self, key, value)
        return self

    def get_model_attr(self, key, default_result=None):
        try:
            return self.__dict__[key]
        except KeyError:
            return default_result

    @property
    def id(self) -> str:
        return self.get_model_attr(ID)

    @property
    def item_search_criteria(self) -> str:
        return self.get_model_attr(ITEM_SEARCH_CRITERIA)

    @property
    def item_search_value(self) -> str:
        return self.get_model_attr(ITEM_SEARCH_VALUE)

    @property
    def asset_search_criteria(self) -> str:
        return self.get_model_attr(ASSET_SEARCH_CRITERIA)

    @property
    def asset_search_value(self) -> str:
        return self.get_model_attr(ASSET_SEARCH_VALUE)

    @property
    def start_time(self) -> str:
        return self.get_model_attr(START_TIME)

    @property
    def end_time(self) -> str:
        return self.get_model_attr(END_TIME)

    @property
    def category_id(self) -> str:
        return self.get_model_attr(CATEGORY_ID)

    @property
    def quantity(self) -> str:
        return self.get_model_attr(QUANTITY)

    @property
    def item_id(self) -> str:
        return self.get_model_attr(ITEM_ID)

    @property
    def item_name(self) -> str:
        return self.get_model_attr(ITEM_NAME)

    @property
    def item_mpn(self) -> str:
        return self.get_model_attr(ITEM_MPN)

    @property
    def item_unit(self) -> str:
        return self.get_model_attr(ITEM_UNIT)

    @id.setter
    def id(self, value):
        self.__dict__[ID] = value

    @item_search_criteria.setter
    def item_search_criteria(self, value):
        self.__dict__[ITEM_SEARCH_CRITERIA] = value

    @item_search_value.setter
    def item_search_value(self, value):
        self.__dict__[ITEM_SEARCH_VALUE] = value

    @asset_search_criteria.setter
    def asset_search_criteria(self, value):
        self.__dict__[ASSET_SEARCH_CRITERIA] = value

    @asset_search_value.setter
    def asset_search_value(self, value):
        self.__dict__[ASSET_SEARCH_VALUE] = value

    @start_time.setter
    def start_time(self, value):
        self.__dict__[START_TIME] = value

    @end_time.setter
    def end_time(self, value):
        self.__dict__[END_TIME] = value

    @category_id.setter
    def category_id(self, value):
        self.__dict__[CATEGORY_ID] = value

    @quantity.setter
    def quantity(self, value):
        self.__dict__[QUANTITY] = value

    @item_id.setter
    def item_id(self, value):
        self.__dict__[ITEM_ID] = value

    @item_name.setter
    def item_name(self, value):
        self.__dict__[ITEM_NAME] = value

    @item_mpn.setter
    def item_mpn(self, value):
        self.__dict__[ITEM_MPN] = value

    @item_unit.setter
    def item_unit(self, value):
        self.__dict__[ITEM_UNIT] = value


class ExcelFileGenerator:

    def __init__(self, logger) -> None:
        self._write_row = None
        self.workbook = None
        self.records_worksheet = None
        self.logger = logger

    def create_file(self, filename: str):
        self.workbook = Workbook(filename)
        self.records_worksheet = self.workbook.add_worksheet(EXCEL_RECORDS_TAB)

        self._create_records_header_row()
        self._write_row = self._qt_write_row

        return self

    def _create_records_header_row(self):
        row = 0
        col = 0

        for header in EXCEL_COLUMN_RECORD_TITLES:
            self.records_worksheet.write(row, col, header)
            col += 1

    def add_lines(self, usage_lines: list):
        record_count = 1

        for usage_line in usage_lines:
            self._write_row(
                worksheet=self.records_worksheet,
                row=record_count,
                usage_line=usage_line)

            record_count += 1

        self.workbook.close()

        return record_count

    def _qt_write_row(self, worksheet: object, row: int, usage_line: UsageLine):

        worksheet.write(row, 0, usage_line.id)
        worksheet.write(row, 1, usage_line.record_note)
        worksheet.write(row, 2, usage_line.item_search_criteria)
        worksheet.write(row, 3, usage_line.item_search_value)
        worksheet.write(row, 4, usage_line.asset_search_criteria)
        worksheet.write(row, 5, usage_line.asset_search_value)
        worksheet.write(row, 6, usage_line.start_time)
        worksheet.write(row, 7, usage_line.end_time)
        worksheet.write(row, 8, usage_line.category_id)
        worksheet.write(row, 9, int(round(usage_line.quantity, const.QR_PRECISION_VALUE)))
        worksheet.write(row, 10, usage_line.item_name)
        worksheet.write(row, 11, usage_line.item_id)
        worksheet.write(row, 12, usage_line.item_mpn)
        worksheet.write(row, 13, usage_line.item_unit)
        worksheet.write(row, 14, const.PRECISION_TAG.format(value=const.QR_PRECISION_VALUE))
