# -*- coding: utf-8 -*-
#
# Copyright (c) 2023, Ingram Micro
# All rights reserved.
#
from connect.eaas.core.decorators import (
    event,
    variables,
)
from connect.eaas.core.extension import EventsApplicationBase
from connect.eaas.core.responses import (
    BackgroundResponse,
    InteractiveResponse,
)

from connect_malwarebytes.flows.purchase_flow import PurchaseFlow
from connect_malwarebytes.flows.validation_flow import PurchaseDraftValidation
from connect_malwarebytes.flows.cancel_flow import CancelFlow
from connect_malwarebytes.flows.suspend_flow import SuspendFlow
from connect_malwarebytes.flows.resume_flow import ResumeFlow
from connect_malwarebytes.flows.resend_email_flow import ResendEmailFlow


@variables([
])
class MalwarebytesEventsApplication(EventsApplicationBase):

    def __contains__(self, item):
        self.logger.info(f"EventsApplicationBase: {EventsApplicationBase}")

    @event(
        'asset_change_request_processing',
        statuses=[
            'inquiring',
        ],
    )
    def handle_asset_change_request_processing(self, request):
        self.logger.info(f"Obtained request with id {request['id']}")
        return BackgroundResponse.done()

    @event(
        'asset_purchase_request_processing',
        statuses=[
            'pending',
        ],
    )
    def handle_asset_purchase_request_processing(self, request):
        self.logger.info(f"Obtained request with id {request['id']}")
        return PurchaseFlow(request, self.client, self.logger, self.config).handle()

    @event(
        'usage_file_request_processing',
        statuses=[
            'draft', 'uploading', 'uploaded',
            'invalid', 'processing', 'ready',
            'rejected', 'pending', 'accepted',
            'closed',
        ],
    )
    def handle_usage_file_request_processing(self, request):
        self.logger.info(f"Obtained request with id {request['id']}")
        return BackgroundResponse.done()

    @event(
        'asset_cancel_request_processing',
        statuses=[
            'pending',
        ],
    )
    def handle_asset_cancel_request_processing(self, request):
        self.logger.info(f"Obtained request with id {request['id']}")
        return CancelFlow(request, self.client, self.logger, self.config).handle()

    @event(
        'asset_resume_request_processing',
        statuses=[
            'pending',
        ],
    )
    def handle_asset_resume_request_processing(self, request):
        self.logger.info(f"Obtained request with id {request['id']}")
        return ResumeFlow(request, self.client, self.logger, self.config).handle()

    @event(
        'asset_suspend_request_processing',
        statuses=[
            'pending',
        ],
    )
    def handle_asset_suspend_request_processing(self, request):
        self.logger.info(f"Obtained request with id {request['id']}")
        return SuspendFlow(request, self.client, self.logger, self.config).handle()

    @event(
        'asset_purchase_request_validation',
        statuses=[
            'draft',
        ],
    )
    def handle_asset_purchase_request_validation(self, request):
        self.logger.info(f"Request: {request}")
        self.logger.info(f"Obtained request with id {request['id']}")
        return PurchaseDraftValidation(request, self.client, self.logger, self.config).handle()

    @event(
        'product_action_execution'
    )
    def execute_product_action(self, request):
        self.logger.info(f"Request: {request}")
        return ResendEmailFlow(request, self.client, self.logger, self.config).handle()
