from typing import List

from connect.eaas.core.responses import InteractiveResponse

from connect_malwarebytes.connect.const import (
    CONTACT_EMAIL_NAME, MSP_ACCOUNT_ID,
)
from connect_malwarebytes.connect.request import (
    OrderingError, RatingPlanError,
)
from connect_malwarebytes.flows.flows import Flow, ValidationFlow

from malwarebytes.account.domain.exceptions import InvalidEmailFormatError
from malwarebytes.account.domain.messages import EMAIL_INVALID_FORMAT_MESSAGE
from malwarebytes.account.domain.models import Email

global type_plan, first_name, last_name, phone, email


class PurchaseDraftValidation(ValidationFlow):
    """
    Validate:
    - the parameters required to create (or import) a subscription.
    - Check if email exists or not in MalwareBytes.
    - Validate type of subscription.
    """

    def __init__(self, request, client, logger, config):
        super().__init__(request, client, logger, config)

    def process(self) -> InteractiveResponse:
        """
        Entry point for DraftValidation Flow.
        :return: InteractiveResponse
        """
        self.logger.info(
            f"Starting Validation process for request {self.request_data.id()} with status "
            f"{self.request_data.status()}.")

        self.clear_errors()

        error_params = self._validate_create_subscription()

        for param in error_params:
            self.request_data.update_parameter(
                param_id=param['id'],
                value_error=param['value_error'],
            )

        return InteractiveResponse.done(body=self.request_data.request)

    def clear_errors(self):
        """Clears the value_error field of the parameters used in the flow"""
        self.request_data.update_parameter(param_id=CONTACT_EMAIL_NAME, value_error='')
        self.request_data.update_parameter(param_id=MSP_ACCOUNT_ID, value_error='')

    def _validate_create_subscription(self) -> List[dict]:
        """
        Validate the parameters required to create (or import) a subscription.
        :return: List[dict]
        """
        try:
            # Validate that all params are right and not empty.
            Flow.validate_items(self)
        except (OrderingError, RatingPlanError) as ex:
            self.logger.error(f"There was the following error: {ex}")
            raise

        error_params = []
        try:
            self.email = Email(self.request_data.get_email())
        except InvalidEmailFormatError:
            error_params.append({
                "id": CONTACT_EMAIL_NAME,
                "value_error": EMAIL_INVALID_FORMAT_MESSAGE.format(self.request_data.get_email())})
        else:
            _, _, error_params = Flow.check_if_new_subscription(
                self, error_params)

        return error_params
