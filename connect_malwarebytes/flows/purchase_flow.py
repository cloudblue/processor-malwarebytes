from typing import Tuple

from connect.eaas.core.responses import BackgroundResponse

from connect_malwarebytes.flows.flows import Flow, ProcessingFlow, WithStepExecutor
from connect_malwarebytes.flows.steps.create_account import create_msp_account
from connect_malwarebytes.flows.steps.get_license import get_license_key
from connect_malwarebytes.flows.steps.create_site import create_new_site
from connect_malwarebytes.flows.steps.create_trial_subscription import create_new_trial_subscription
from connect_malwarebytes.flows.steps.approve_request import approve_request
from connect_malwarebytes.connect.const import (
    CONTACT_EMAIL_NAME, LICENSE_KEY, MSP_ACCOUNT_ID_FULFILLMENT, OWNER_EMAIL, PRODUCTION_ENV,
    SITE_ID, USER_ID, VENDOR_ID,
)
from connect_malwarebytes.connect.request import get_param_value, OrderingError, RatingPlanError
from connect_malwarebytes.connect import messages

from malwarebytes.account.domain.messages import EMAIL_INVALID_FORMAT_MESSAGE
from malwarebytes.account.domain.exceptions import (
    EmailAlreadyExistsError, InvalidEmailFormatError, InvalidFirstNameFormatError,
    InvalidLastNameFormatError, InvalidMspIdFormatError, InvalidPhoneFormatError,
)
from malwarebytes.account.infrastructure.exceptions import AccountExistingEmailException
from malwarebytes.account.domain.models import (
    Account, AccountId, City, CompanyName, Contact, Country, Email, FirstName, LastName,
    MSPAccount, MspId, Phone, State, Street,
)
from malwarebytes.account.application.services import AccountGetter


class PurchaseFlow(ProcessingFlow, WithStepExecutor):

    def __init__(self, request, client, logger, config):
        super().__init__(request, client, logger, config)
        self.email = None

    def process(self) -> BackgroundResponse:
        self.logger.info("Starting Purchase process.")
        if self._is_request_from_migration_tool():
            self.logger.info(
                "The Purchase Request is generated by the migration tool. "
                "Avoided all calls to MalwareBytes API.")
            try:
                self._get_migration_data()
            except (InvalidMspIdFormatError, InvalidEmailFormatError):
                self.logger.error('Invalid Migration Info Object to Migrate.')
                self.fail_request(
                    request_id=self.request_data.id(),
                    error_message=messages.INVALID_MIGRATION)
                return BackgroundResponse.fail()
        else:
            try:
                Flow.validate_items(self)
            except RatingPlanError:
                self.logger.error('There is no Rating Plan configured in Connect',
                                  'Failing the request.')
                self.fail_request(
                    request_id=self.request_data.id(),
                    error_message=messages.RATING_PLAN_MISSING)
                return BackgroundResponse.fail()
            except OrderingError:
                self.logger.info("Any Valid Reservation Item was selected.")
                self.fail_request(
                    request_id=self.request_data.id(),
                    error_message=messages.RATING_PLAN_PARAMETER_NOT_FOUND)
                return BackgroundResponse.fail()

            self.create_account()

        return BackgroundResponse.done()

    def create_account(self):
        self.logger.info("CREATE ACCOUNT")

        error_params = []
        try:
            self.email = Email(self.request_data.get_email())

            is_new_subscription, msp_account, error_params = Flow.check_if_new_subscription(
                self, error_params)

        except InvalidEmailFormatError:
            error_params.append({
                "id": CONTACT_EMAIL_NAME,
                "value_error": EMAIL_INVALID_FORMAT_MESSAGE.format(
                    self.request_data.get_email())})

        if error_params:
            for param in error_params:
                self.request_data.update_parameter(
                    param_id=param['id'],
                    value_error=param['value_error'],
                )
                self.update_parameters(self.request_data.id(),
                                       self.request_data.generate_params_for_update())
                self.inquire_request(self.request_data.id())
        else:
            try:
                if is_new_subscription:
                    self._process_new_subscription()
                else:
                    self._process_import_subscription(msp_account)
            except (
                    InvalidFirstNameFormatError, InvalidLastNameFormatError,
                    InvalidEmailFormatError, InvalidPhoneFormatError, EmailAlreadyExistsError,
                    AccountExistingEmailException,
            ) as err:
                self.logger.error(str(err))

                self.fail_request(
                    request_id=self.request_data.id(),
                    error_message=str(err))

    def _is_request_from_migration_tool(self) -> bool:
        """
        Check if the request is from migration tool checking the migration_info parameter.

        Returns
        -------
        bool
            True if the request is from migration tool, False otherwise.
        """
        return bool(self.request_data.migration_info())

    def _process_new_subscription(self) -> BackgroundResponse:
        """
        Process a new Subscription
        > Creates the Account
        :return: Tuple[MSPAccount, str]
        """
        return self.execute_all([
            create_msp_account,
            get_license_key,
            create_new_site,
            create_new_trial_subscription,
            approve_request,
        ])

    def _process_import_subscription(self, msp_account: MSPAccount):
        """
        Process an import Subscription
        :param msp_account:
        :return:
        """
        self.logger.info("Processing an Import Subscription")
        email = self.request_data.get_email()
        msp_account_id = self.request_data.msp_account_id()

        log_message = "Updating parameters: "
        if not self.request_data.msp_account_id_fulfillment():
            self.request_data.update_parameter(param_id=MSP_ACCOUNT_ID_FULFILLMENT,
                                               value=msp_account_id)
            log_message = log_message + f"{MSP_ACCOUNT_ID_FULFILLMENT}={msp_account_id}; "

        self.request_data.update_parameter(param_id=OWNER_EMAIL, value=email)
        log_message = log_message + f"{OWNER_EMAIL}={email}; "

        self.request_data.update_parameter(param_id=LICENSE_KEY,
                                           value=msp_account.get('license_key'))
        log_message = log_message + f"{LICENSE_KEY}={msp_account.get('license_key')}; "

        if msp_account.get('users'):
            self.request_data.update_parameter(param_id=USER_ID,
                                               value=msp_account.get('users')[0].get('user_id'))
            log_message = log_message + f"{USER_ID}={msp_account.get('users')[0].get('user_id')}; "

        if msp_account.get('sites'):
            self.request_data.update_parameter(param_id=SITE_ID,
                                               value=msp_account.get('sites')[0].get('site_id'))
            log_message = log_message + f"{SITE_ID}={msp_account.get('sites')[0].get('site_id')}; "

        self.logger.info(log_message)

        self.logger.info(f"Account imported successfully with ID: {msp_account_id}")

        self.update_parameters(self.request_data.id(),
                               self.request_data.generate_params_for_update())

        return self.execute_all([
            approve_request,
        ])

    def _get_migration_data(self):
        """
        Process a migration Subscription
        """

        migration_data = self.request_data.migration_info()

        self.logger.info("Getting parameters of migration info object.")

        params_update = []
        # Required params in json.
        account_id = MspId(migration_data[MSP_ACCOUNT_ID_FULFILLMENT])
        params_update.append({
            "field": MSP_ACCOUNT_ID_FULFILLMENT,
            "value": account_id.value,
        })

        owner_email = Email(migration_data[OWNER_EMAIL])
        params_update.append({
            "field": OWNER_EMAIL,
            "value": owner_email.value,
        })

        # Optional Params in Json.
        if VENDOR_ID in migration_data:
            params_update.append({
                "field": VENDOR_ID,
                "value": migration_data[VENDOR_ID],
            })
        if LICENSE_KEY in migration_data:
            params_update.append({
                "field": LICENSE_KEY,
                "value": migration_data[LICENSE_KEY],
            })
        if USER_ID in migration_data:
            params_update.append({
                "field": USER_ID,
                "value": migration_data[USER_ID],
            })

        log_message = "Parameters got of migration info object: "
        for param in params_update:
            log_message = log_message + f"{param.get('field')}={param.get('value')}; "

        self.logger.info(log_message)

        log_message_update = "Updating parameters: "
        for param in params_update:
            log_message_update = log_message_update + f"{param.get('field')}={param.get('value')}; "
            self.request_data.update_parameter(
                param_id=param.get('field'),
                value=param.get('value'))

        self.logger.info(log_message_update)

        self.update_parameters(
            self.request_data.id(),
            self.request_data.generate_params_for_update())

    def get_parameters_account(self) -> Account:
        """
        Create Account entity from the request data.

        Returns
        -------
        Account
            The Account entity created from the request data.
        """

        company_name = self.request_data.asset_company_name()
        street = self.request_data.asset_billing_street()
        city = self.request_data.asset_billing_city()
        country = self.request_data.asset_billing_country()
        billing_type = self.request_data.billing_type()

        test_account = (self.request_data.environment() == PRODUCTION_ENV)

        return Account(
            company_name=CompanyName(company_name),
            street=Street(street),
            city=City(city),
            country=Country(country.upper()),
            state=State(self.request_data.asset_billing_state()),
            term_type=billing_type,
            test_account=test_account,
        )

    def _get_parameters_contact(self) -> Contact:
        """
        Create Contact entity from the request data.

        Returns
        -------
        Contact
            The Contact entity created from the request data.
        """
        params = self.request_data.params()

        first_name = self.request_data.asset_first_name()
        last_name = self.request_data.asset_last_name()
        phone_number = self.request_data.asset_phone_number()

        return Contact(
            first_name=FirstName(first_name),
            last_name=LastName(last_name),
            email=Email(get_param_value(params, CONTACT_EMAIL_NAME)),
            phone=Phone(phone_number),
        )

    def find_error_type(self, err) -> str:  # pragma: no cover
        """
        Find name of exception.
        :param err:
        :return: str
        """
        error_type = str(type(err))
        list_error = error_type.split(".")
        list_error.reverse()
        name_error = list_error[0][:-2]

        return name_error

    def get_credentials_by_msp_account_id(
            self, msp_account_id: AccountId, user_id: str) -> Tuple[str, str]:  # pragma: no cover

        # First is get the credentials to can do the calls to create site and trial subscription
        client_id, client_secret = AccountGetter(self.account_repository()).get_credentials(
            msp_account_id, user_id)

        return client_id, client_secret
