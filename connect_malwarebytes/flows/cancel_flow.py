from connect.eaas.core.responses import BackgroundResponse

from connect_malwarebytes.flows.flows import ProcessingFlow
from malwarebytes.account.domain.exceptions import NotExistsMspIdError
from malwarebytes.account.infrastructure.exceptions import MBClientException
from malwarebytes.account.application.services import AccountCancel
from malwarebytes.account.domain.models import AccountId
from malwarebytes.account.domain.messages import CANCEL_ACCOUNT


class CancelFlow(ProcessingFlow):

    def process(self) -> BackgroundResponse:
        self.logger.info("Starting Cancel process.")

        try:
            self._cancel_subscription()
        except MBClientException as err:
            self.logger.warning(str(err))

        return BackgroundResponse.done()

    def _cancel_subscription(self):
        """
        Cancel Subscription in MalwareBytes.
        """
        msp_account_id = self.request_data.msp_account_id_fulfillment()
        if not msp_account_id:
            raise NotExistsMspIdError("Subscription not contain any MSP Account ID")
        self.logger.info(
            f"Cancelling Subscription in MalwareBytes with MSP Account ID: {msp_account_id}.")
        AccountCancel(self.account_repository()).cancel(AccountId(msp_account_id))

        self.approve_request(self.request_data.id(), "", CANCEL_ACCOUNT.format(msp_account_id))

        self.logger.info(f"Cancel request approved to MSP Account ID: {msp_account_id}.")
