from datetime import date, datetime, timedelta

from dateutil.relativedelta import relativedelta
from connect.eaas.core.responses import ScheduledExecutionResponse

from connect_malwarebytes.flows.flows import ProcessingFlow
from connect_malwarebytes.connect.usage import (
    AssetsGetter, ListingGetter, ReportUploader, UsageFileGenerator,
)

from malwarebytes.account.infrastructure.exceptions import MBClientException


class UsageFlow(ProcessingFlow):
    """Usage Request"""

    def process(self) -> ScheduledExecutionResponse:
        self.logger.info(f"Starting Usage process to product {self.product_id}.")

        try:
            self._process_usage()
        except MBClientException as ex:
            self.logger.exception("Usage process failed. HelpDesk Case Created. "
                                  "To be automatically retried by Connect.")
            raise ex

        return ScheduledExecutionResponse.done()

    def _get_billing_datetime(self):
        """
        Returns the date with the value of the first day of the previous month

        return:
            date
        """
        return (datetime.now() + relativedelta(months=-1)).replace(day=1)

    def _get_last_day_of_month(self, start_date: date) -> date:
        """
        Returns the last day of the of the given date.

        Parameters
        ----------
        start_date : date
            Date to get the last day of the month.

        Returns
        -------
        date
            Last day of the month.
        """
        next_month = start_date.replace(day=28) + timedelta(days=4)
        return next_month - timedelta(days=next_month.day)

    def _process_usage(self):
        """
        Manages the main flow to generate and upload the usage files.
        """
        start_date = self._get_billing_datetime()
        end_date = self._get_last_day_of_month(start_date)

        for listing in ListingGetter(self.client, self.logger).execute(product_id=self.product_id):
            self.distributor_id = listing['provider']['id']
            contract_id = listing['contract']['id']

            self.logger.info(
                f"Product {self.product_id}: Processing Usage for contract {contract_id}.")

            # Gets the Assets for the given Contract
            assets = AssetsGetter(self.client, self.logger).execute(product_id=self.product_id,
                                                                    contract_id=contract_id)

            # Generates the usage file for the given Assets
            self.logger.info(f"Product {self.product_id}: Generating Usage File from contract "
                             f"{contract_id} assets.")
            filename = UsageFileGenerator(self.config, self.logger).execute(
                assets, contract_id, start_date=start_date, end_date=end_date)

            # Skip if the usage file is empty
            if not filename:
                self.logger.info(
                    f"Product {self.product_id}: Usage File is empty for Contract {contract_id}. "
                    f"Skipping.")
                continue

            # Uploads the usage file to Connect
            self.logger.info(
                f"Product {self.product_id}: Uploading Usage File for contract {contract_id}.")
            ReportUploader(self.client, self.logger).execute(self.product_id, filename, contract_id,
                                                             start_date, end_date)
