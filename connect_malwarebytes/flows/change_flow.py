from connect.eaas.core.responses import BackgroundResponse

from connect_malwarebytes.flows.flows import ProcessingFlow
from connect_malwarebytes.connect.messages import ITEM_TO_CHANGE_NOT_VALID
from connect_malwarebytes.connect.request import get_param_value
from connect_malwarebytes.connect import const

from malwarebytes.account.domain.exceptions import (
    ItemToChangeNotValid, MoreThanOneReservationItem, NotExistsMspIdError,
)
from malwarebytes.account.infrastructure.exceptions import (
    AccountDataNotValidException, MBClientException,
)
from malwarebytes.account.domain.messages import CHANGE_ACCOUNT
from malwarebytes.account.application.services import AccountChange
from malwarebytes.account.domain.models import AccountId


class ChangeFlow(ProcessingFlow):
    """
    Resume Subscription
    """

    def process(self) -> BackgroundResponse:
        self.logger.info("Starting Change process.")

        try:
            self._change_subscription()
        except (MBClientException, MoreThanOneReservationItem, ItemToChangeNotValid,
                AccountDataNotValidException) as err:
            self.fail_request(self.request_data.id(), str(err))

        return BackgroundResponse.done()

    def _change_subscription(self):
        """
        Resume Subscription in MalwareBytes.
        """
        self.msp_account_id = self.request_data.msp_account_id_fulfillment()
        if not self.msp_account_id:
            raise NotExistsMspIdError("Subscription not contain any MSP Account ID")

        self._check_reservation_items()

        # Call MalwareBytes to Convert Trial To Paid.
        AccountChange(self.account_repository()).change(AccountId(self.msp_account_id))

        self.approve_request(self.request_data.id(), "",
                             CHANGE_ACCOUNT.format(self.msp_account_id))

        self.logger.info(f"Change request approved to MSP Account ID: {self.msp_account_id}.")

    def _check_reservation_items(self):
        """
        Check reservations items, to control we only have one, and we change only trail to paid.
        :return:
        """
        self.logger.info(
            f"Checking if subscription with MSP Account ID: {self.msp_account_id} can be change "
            f"trial to paid.")

        item_to_add = 0
        item_to_remove = 0

        for item in self.request_data.all_reservation_items():
            billing_type = get_param_value(item.get('params'), const.BILLING_TYPE)
            quantity = int(item.get('quantity'))
            old_quantity = int(item.get('old_quantity'))

            # Find the item will add.
            if quantity > 0 and old_quantity == 0:
                if billing_type == const.TRIAL:
                    self.logger.error(
                        f"Account with MSP Account ID: {self.msp_account_id} cannot be change. "
                        f"You are trying to change to Trial Item, it is not possible.")
                    raise ItemToChangeNotValid(ITEM_TO_CHANGE_NOT_VALID)

                item_to_add += 1

            # Find the item will remove.
            if old_quantity > 0 and quantity == 0:
                if billing_type == const.PAID:
                    self.logger.error(
                        f"Account with MSP Account ID: {self.msp_account_id} cannot be change. "
                        f"You are trying to change a Paid Subscription, it is not possible.")
                    raise ItemToChangeNotValid(ITEM_TO_CHANGE_NOT_VALID)

                item_to_remove += 1

        if item_to_add != 1 or item_to_remove != 1:
            self.logger.error(
                f"Account with MSP Account ID: {self.msp_account_id} cannot be change. "
                f"Only you can change Trial to Paid Plan.")
            raise ItemToChangeNotValid(ITEM_TO_CHANGE_NOT_VALID)
