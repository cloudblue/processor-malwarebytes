import time

from connect_malwarebytes.connect.const import (
    LICENSE_KEY,
    MAX_RETRIES,
    TIME_INTERVAL,
    USER_ID,
)
from connect_malwarebytes.connect import messages

from malwarebytes.account.domain.exceptions import (
    LicenseKeyNotFound,
    UsersNotFound,
)
from malwarebytes.account.application.services import AccountGetter


def get_license_key(flow):
    """
    GEt License Key for an existing MSP Account ID
    :param flow:
    :return:
    """
    flow.logger.info("Processing to get License Key and User Id.")

    if flow.get_license_key() and flow.get_user_id():
        flow.logger.info(f"Skip step to get License Key and User Id. License Key: "
                         f"{flow.get_license_key()} and User Id: {flow.get_user_id()}")
        return

    condition = False
    retries = 0
    while not condition and retries < MAX_RETRIES:
        # We need to wait until the license key is retrieved from MalwareBytes API.
        # It's an expected behaviour in MalwareBytes Api. it takes about 1-3 minutes.
        time.sleep(TIME_INTERVAL)
        retries += 1
        flow.logger.info(f"Attempt {retries} to obtain the License Key and user ID.")
        msp_account = AccountGetter(flow.account_repository()).get_msp_account(
            flow.get_msp_account_id_fulfillment())

        if msp_account and msp_account.get('users') and msp_account.get(
                'license_key'):
            condition = True

    if not msp_account.get('license_key'):
        raise LicenseKeyNotFound(
            messages.LICENSE_KEY_NOT_FOUND.format(id=flow.get_msp_account_id_fulfillment()))
    elif not msp_account.get('users'):
        raise UsersNotFound(
            messages.USERS_NOT_FOUND.format(id=flow.get_msp_account_id_fulfillment()))
    else:
        flow.logger.info(f"Information License Key and User Id found after {retries} attempt.")

    flow.request_data.update_parameter(param_id=LICENSE_KEY, value=msp_account.get('license_key'))
    flow.request_data.update_parameter(param_id=USER_ID,
                                       value=msp_account.get('users')[0].get('user_id'))

    return flow.update_parameters(flow.request_data.id(),
                                  flow.request_data.generate_params_for_update())
