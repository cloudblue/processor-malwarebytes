import os

import pytest

from unittest.mock import MagicMock

from connect.eaas.core.responses import ScheduledExecutionResponse
from connect.eaas.core.enums import ResultType
from malwarebytes.account.infrastructure.exceptions import MBClientException

from connect_malwarebytes.connect.usage import (
    AssetReport, AssetsGetter, BillingGetter, ListingGetter, ReportUploader,
)
from connect_malwarebytes.flows.usage_flow import UsageFlow
from connect_malwarebytes.connect.const import PRODUCT_ID
from connect_malwarebytes.connect.excel import ExcelFileGenerator

from tests import test_utils


class TestUsageFlow:
    def test_process_successful_usage(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_usage_request()
        listings = test_utils.mock_listing_request()
        usage = test_utils.mock_usage()
        usage_items = test_utils.mock_usage_items()
        flow = UsageFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()

        ListingGetter.execute = MagicMock(return_value=listings)
        flow.config[PRODUCT_ID] = 'PRD-462-646-079'

        ExcelFileGenerator.create_file = MagicMock()
        AssetsGetter.execute = MagicMock(return_value=usage)
        AssetReport.msp_account_id = MagicMock(
            return_value='3530666438636638363332336266333936346434633164643833616633653734')

        flow.account_repository = MagicMock()
        AssetReport.account_repository = MagicMock()
        AssetReport.environment = MagicMock(return_value=request)
        BillingGetter.execute = MagicMock(return_value=usage_items)

        ReportUploader._create_usage_report = MagicMock(return_value={'id': '123456'})
        ReportUploader._upload_usage_report = MagicMock()
        ReportUploader._submit_usage_report = MagicMock()
        os.remove = MagicMock()

        flow.approve_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, ScheduledExecutionResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_successful_without_usage(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_usage_request()
        listings = test_utils.mock_listing_request()
        usage = test_utils.mock_usage()
        flow = UsageFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()

        ListingGetter.execute = MagicMock(return_value=listings)
        flow.config[PRODUCT_ID] = 'PRD-462-646-079'

        ExcelFileGenerator.create_file = MagicMock()
        AssetsGetter.execute = MagicMock(return_value=usage)
        AssetReport.msp_account_id = MagicMock(
            return_value='3530666438636638363332336266333936346434633164643833616633653333')

        flow.account_repository = MagicMock()
        AssetReport.account_repository = MagicMock()
        AssetReport.environment = MagicMock(return_value=request)
        BillingGetter.execute = MagicMock(return_value='')

        flow.approve_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, ScheduledExecutionResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_usage_with_exception(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_usage_request()
        flow = UsageFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        ListingGetter.execute = MagicMock(side_effect=MBClientException('Some Error'))
        flow.config[PRODUCT_ID] = 'PRD-462-646-079'

        flow.approve_request = MagicMock()

        with pytest.raises(MBClientException) as exception_info:
            flow.process()
        assert str(exception_info.value) == 'Some Error'
