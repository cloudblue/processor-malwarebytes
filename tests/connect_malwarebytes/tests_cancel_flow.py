import pytest

from unittest.mock import MagicMock

from connect.eaas.core.responses import BackgroundResponse
from connect.eaas.core.enums import ResultType
from malwarebytes.account.domain.exceptions import NotExistsMspIdError
from malwarebytes.account.infrastructure.exceptions import MBClientException
from malwarebytes.account.application.services import AccountCancel

from connect_malwarebytes.flows.cancel_flow import CancelFlow
from connect_malwarebytes.connect.usage import ReportInfo

from tests import test_utils


class TestCancelFlow:
    def test_process_successful_cancel(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        report = test_utils.mock_request()
        flow = CancelFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        ReportInfo.get_last = MagicMock(return_value=report)

        # Mocking an MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(
            return_value='3639633938356633313134323662616561323731643839613936396137313630')

        flow.request_data.request['events']['created']['at'] = '2022-12-31T14:40:41+00:00'

        flow.approve_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS
        flow.approve_request.assert_called_once()

    def test_process_schedule_cancel_to_next_report(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        report = test_utils.mock_request()
        flow = CancelFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        ReportInfo.get_last = MagicMock(return_value=report)

        # Mocking an MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(
            return_value='3639633938356633313134323662616561323731643839613936396137313630')

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_schedule_cancel_no_report(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = CancelFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        ReportInfo.get_last = MagicMock(return_value='')
        AccountCancel.cancel = MagicMock()
        flow.client = MagicMock()

        # Mocking an MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(
            return_value='3639633938356633313134323662616561323731643839613936396137313630')

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_cancel_with_exception(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = CancelFlow(request, connect_client, connect_logger, {})
        flow.request_data = MagicMock()
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Mocking cancellation with an exception
        flow._cancel_subscription = MagicMock(side_effect=MBClientException('Some Error'))
        result = flow.process()

        assert result.status == ResultType.FAIL

    def test_cancel_subscription_invalid_msp_account_id(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = CancelFlow(request, connect_client, connect_logger, {})
        flow.request_data = MagicMock()
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Mocking an invalid MSP Account ID
        flow.request_data.msp_account_id_fulfillment.return_value = None

        # Act & Assert
        with pytest.raises(NotExistsMspIdError):
            flow._cancel_subscription()
