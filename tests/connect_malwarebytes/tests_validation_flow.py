import pytest

from unittest.mock import MagicMock

from connect.eaas.core.responses import InteractiveResponse
from connect.eaas.core.enums import ResultType
from malwarebytes.account.domain.exceptions import InvalidMspIdFormatError

from connect_malwarebytes.flows.validation_flow import PurchaseDraftValidation
from connect_malwarebytes.connect.request import OrderingError, RatingPlanError

from tests import test_utils


class TestPurchaseDraftValidation:
    def test_process_successful_purchase_draft_validation(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow._check_existing_email = MagicMock(return_value='')

        flow.approve_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_purchase_draft_validation_no_reservation_item(self, connect_client,
                                                                   connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow._check_existing_email = MagicMock(return_value='')

        # Delete Items
        flow.request_data.items().clear()

        with pytest.raises(RatingPlanError) as exception_info:
            flow.process()
        assert str(
            exception_info.value) == ('Rating plan is not valid. Check that only one rating '
                                      'plan item is selected.')

    def test_process_purchase_draft_validation_more_than_one_reservation_item(self, connect_client,
                                                                              connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow._check_existing_email = MagicMock(return_value='')

        # Add Reservation Items
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "new",
                    "events": {
                        "created": {
                            "at": "2023-04-18T16:48:00+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-04-18T16:48:00+00:00",
                        },
                    },
                    "id": "type_item",
                    "title": "Type Item",
                    "description": "Choose if Item is to create new subscription or import "
                                   "subscription",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "New Subscription",
                                "value": "new",
                                "default": True,
                            },
                            {
                                "label": "Import Subscription",
                                "value": "import",
                            },
                        ],
                        "shared": "None",
                    },
                },
            ],
        })

        with pytest.raises(OrderingError) as exception_info:
            flow.process()
        assert str(
            exception_info.value) == 'Only one reservation should be selected.'

    def test_process_draft_validation_email_exists(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_draft_validation_email_wrong_format(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Change Email value
        flow.request_data.params()[4]['value'] = 'test'

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_draft_validation_first_name_empty(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Change First Name value
        flow.request_data.params()[5]['value'] = ''

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_draft_validation_last_name_empty(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Change Last Name value
        flow.request_data.params()[6]['value'] = ''

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_draft_validation_phone_number_empty(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Change Phone Number value
        flow.request_data.params()[7]['value'] = ''

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_draft_validation_company_name_empty(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow._check_existing_email = MagicMock(return_value='')

        # Change CompanyName value
        flow.request_data.tiers()['customer']['name'] = ''

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_draft_validation_street_empty(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow._check_existing_email = MagicMock(return_value='')

        # Change Street value
        flow.request_data.tiers()['customer']['contact_info']['address_line1'] = ''

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_draft_validation_city_empty(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow._check_existing_email = MagicMock(return_value='')

        # Change City value
        flow.request_data.tiers()['customer']['contact_info']['city'] = ''

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_draft_validation_country_empty(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow._check_existing_email = MagicMock(return_value='')

        # Change Country value
        flow.request_data.tiers()['customer']['contact_info']['country'] = ''

        flow.inquire_parameters = MagicMock()
        result = flow.process()

        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_import_draft_validation_wrong_item_type(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        existing_account = {
            'msp_account_id': '3639633938356633313134323662616561323731643839613936396137313630'}
        flow._check_existing_email = MagicMock(return_value=existing_account)

        # Clear all items and add one reservation to import.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "",
                    "events": {
                        "created": {
                            "at": "2023-04-18T16:48:00+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-04-18T16:48:00+00:00",
                        },
                    },
                    "id": "type_item",
                    "title": "Type Item",
                    "description": "Choose if Item is to create new subscription or import "
                                   "subscription",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "New Subscription",
                                "value": "new",
                                "default": True,
                            },
                            {
                                "label": "Import Subscription",
                                "value": "import",
                            },
                        ],
                        "shared": "None",
                    },
                },
            ],
        })
        flow.request_data.params()[10][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        with pytest.raises(OrderingError) as exception_info:
            flow.process()
        assert str(
            exception_info.value) == ('Rating plan is not valid. Check that only one rating plan '
                                      'item is selected.')

    def test_process_successful_import_draft_validation(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        existing_account = {
            'msp_account_id': '3639633938356633313134323662616561323731643839613936396137313630'}
        flow._check_existing_email = MagicMock(return_value=existing_account)

        # Clear all items and add one reservation to import.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "import",
                    "events": {
                        "created": {
                            "at": "2023-04-18T16:48:00+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-04-18T16:48:00+00:00",
                        },
                    },
                    "id": "type_item",
                    "title": "Type Item",
                    "description": "Choose if Item is to create new subscription or import "
                                   "subscription",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "New Subscription",
                                "value": "new",
                                "default": True,
                            },
                            {
                                "label": "Import Subscription",
                                "value": "import",
                            },
                        ],
                        "shared": "None",
                    },
                },
            ],
        })
        flow.request_data.params()[10][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        flow.approve_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_import_draft_validation_different_msp_account_id(self, connect_client,
                                                                      connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Clear all items and add one reservation to import.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "import",
                    "events": {
                        "created": {
                            "at": "2023-04-18T16:48:00+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-04-18T16:48:00+00:00",
                        },
                    },
                    "id": "type_item",
                    "title": "Type Item",
                    "description": "Choose if Item is to create new subscription or import "
                                   "subscription",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "New Subscription",
                                "value": "new",
                                "default": True,
                            },
                            {
                                "label": "Import Subscription",
                                "value": "import",
                            },
                        ],
                        "shared": "None",
                    },
                },
            ],
        })
        flow.request_data.params()[10][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        result = flow.process()

        # Assert
        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_import_draft_validation_wrong_msp_account_id(self, connect_client,
                                                                  connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Clear all items and add one reservation to import.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "import",
                    "events": {
                        "created": {
                            "at": "2023-04-18T16:48:00+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-04-18T16:48:00+00:00",
                        },
                    },
                    "id": "type_item",
                    "title": "Type Item",
                    "description": "Choose if Item is to create new subscription or import "
                                   "subscription",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "New Subscription",
                                "value": "new",
                                "default": True,
                            },
                            {
                                "label": "Import Subscription",
                                "value": "import",
                            },
                        ],
                        "shared": "None",
                    },
                },
            ],
        })
        flow.request_data.params()[10][
            'value'] = '363963393896137313630'

        with pytest.raises(InvalidMspIdFormatError) as exception_info:
            flow.process()
        assert str(
            exception_info.value) == "Invalid MSP ID in '363963393896137313630'"

    def test_process_import_draft_validation_account_not_exists(self, connect_client,
                                                                connect_logger):
        # Arrange
        request = test_utils.mock_draft_request()
        flow = PurchaseDraftValidation(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow._check_existing_email = MagicMock(return_value='')

        # Clear all items and add one reservation to import.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "import",
                    "events": {
                        "created": {
                            "at": "2023-04-18T16:48:00+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-04-18T16:48:00+00:00",
                        },
                    },
                    "id": "type_item",
                    "title": "Type Item",
                    "description": "Choose if Item is to create new subscription or import "
                                   "subscription",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "New Subscription",
                                "value": "new",
                                "default": True,
                            },
                            {
                                "label": "Import Subscription",
                                "value": "import",
                            },
                        ],
                        "shared": "None",
                    },
                },
            ],
        })
        flow.request_data.params()[10][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        flow.approve_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS
