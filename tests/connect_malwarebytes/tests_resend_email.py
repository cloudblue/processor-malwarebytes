import pytest

from unittest.mock import MagicMock

from connect.eaas.core.responses import InteractiveResponse
from connect.eaas.core.enums import ResultType
from malwarebytes.account.domain.exceptions import NotExistsMspIdError
from malwarebytes.account.infrastructure.exceptions import MBClientException

from connect_malwarebytes.flows.resend_email_flow import ResendEmailFlow

from tests import test_utils


class TestResendEmail:
    def test_process_successful_resend_email(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_product_action_request()
        asset_request = test_utils.mock_resend_email_request()
        flow = ResendEmailFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow.get_asset = MagicMock(return_value=asset_request)
        flow.request_data = request
        flow.client.assets = asset_request

        result = flow.process()

        # Assert
        assert isinstance(result, InteractiveResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_resend_email_with_exception(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_product_action_request()
        asset_request = test_utils.mock_resend_email_request()
        flow = ResendEmailFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()
        flow.get_asset = MagicMock(return_value=asset_request)
        flow.request_data = request
        flow.client.assets = asset_request

        # Mocking cancellation with an exception
        flow._resend_email = MagicMock(side_effect=MBClientException('Some Error'))
        result = flow.process()

        assert result.status == ResultType.FAIL

    def test_resend_email_invalid_msp_account_id(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = ResendEmailFlow(request, connect_client, connect_logger, {})
        flow.request_data = MagicMock()
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Mocking an invalid MSP Account ID
        flow.request_data.msp_account_id_fulfillment.return_value = None

        # Act & Assert
        with pytest.raises(NotExistsMspIdError):
            flow._resend_email()
