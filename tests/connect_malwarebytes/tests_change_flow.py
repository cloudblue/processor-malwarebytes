import pytest

from unittest.mock import MagicMock

from connect.eaas.core.responses import BackgroundResponse
from connect.eaas.core.enums import ResultType
from malwarebytes.account.domain.exceptions import InvalidMspIdFormatError, NotExistsMspIdError

from connect_malwarebytes.flows.change_flow import ChangeFlow

from tests import test_utils


class TestChangeFlow:
    def test_process_successful_change(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = ChangeFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Clear Items and Add reservations items to change Trial --> Paid.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0001",
            "global_id": "PRD-462-646-079-0001",
            "mpn": "BUS-CLOUD-TRIAL-NEW",
            "old_quantity": "1",
            "quantity": "0",
            "type": "Licenses",
            "display_name": "OneView Trial",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "trial",
                    "events": {
                        "created": {
                            "at": "2023-06-05T10:08:51+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-05T10:08:51+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "paid",
                    "events": {
                        "created": {
                            "at": "2023-06-06T17:53:20+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-06T17:53:20+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })

        # Mocking an MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(
            return_value='3639633938356633313134323662616561323731643839613936396137313630')

        flow.approve_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS
        flow.approve_request.assert_called_once()

    def test_process_wrong_change_paid_to_trial(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = ChangeFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Clear Items and Add reservations items to change Trial --> Paid.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0001",
            "global_id": "PRD-462-646-079-0001",
            "mpn": "BUS-CLOUD-TRIAL-NEW",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Trial",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "trial",
                    "events": {
                        "created": {
                            "at": "2023-06-05T10:08:51+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-05T10:08:51+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "1",
            "quantity": "0",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "paid",
                    "events": {
                        "created": {
                            "at": "2023-06-06T17:53:20+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-06T17:53:20+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })

        # Mocking an MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(
            return_value='3639633938356633313134323662616561323731643839613936396137313630')

        flow.fail_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS
        flow.fail_request.assert_called_once()

    def test_process_wrong_change_paid_to_paid(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = ChangeFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Clear Items and Add reservations items to change Trial --> Paid.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "1",
            "quantity": "0",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "paid",
                    "events": {
                        "created": {
                            "at": "2023-06-06T17:53:20+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-06T17:53:20+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "paid",
                    "events": {
                        "created": {
                            "at": "2023-06-06T17:53:20+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-06T17:53:20+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })

        # Mocking an MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(
            return_value='3639633938356633313134323662616561323731643839613936396137313630')

        flow.fail_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS
        flow.fail_request.assert_called_once()

    def test_process_wrong_change_without_items_to_change(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = ChangeFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Clear Items and Add reservations items to change Trial --> Paid.
        flow.request_data.items().clear()

        # Mocking an MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(
            return_value='3639633938356633313134323662616561323731643839613936396137313630')

        flow.fail_request = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS
        flow.fail_request.assert_called_once()

    def test_change_subscription_invalid_msp_account_id(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = ChangeFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Clear Items and Add reservations items to change Trial --> Paid.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0001",
            "global_id": "PRD-462-646-079-0001",
            "mpn": "BUS-CLOUD-TRIAL-NEW",
            "old_quantity": "1",
            "quantity": "0",
            "type": "Licenses",
            "display_name": "OneView Trial",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "trial",
                    "events": {
                        "created": {
                            "at": "2023-06-05T10:08:51+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-05T10:08:51+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "paid",
                    "events": {
                        "created": {
                            "at": "2023-06-06T17:53:20+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-06T17:53:20+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })

        # Mocking an invalid MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(return_value='36396334323662616')

        with pytest.raises(InvalidMspIdFormatError) as exception_info:
            flow.process()
        assert str(
            exception_info.value) == ("Invalid MSP ID in '36396334323662616'")

    def test_change_subscription_empty_msp_account_id(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_request()
        flow = ChangeFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.account_repository = MagicMock()

        # Clear Items and Add reservations items to change Trial --> Paid.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0001",
            "global_id": "PRD-462-646-079-0001",
            "mpn": "BUS-CLOUD-TRIAL-NEW",
            "old_quantity": "1",
            "quantity": "0",
            "type": "Licenses",
            "display_name": "OneView Trial",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "trial",
                    "events": {
                        "created": {
                            "at": "2023-06-05T10:08:51+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-05T10:08:51+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "paid",
                    "events": {
                        "created": {
                            "at": "2023-06-06T17:53:20+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-06T17:53:20+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })

        # Mocking an invalid MSP Account ID
        flow.request_data.msp_account_id_fulfillment = MagicMock(return_value='')

        with pytest.raises(NotExistsMspIdError) as exception_info:
            flow.process()
        assert str(
            exception_info.value) == "Subscription not contain any MSP Account ID"
