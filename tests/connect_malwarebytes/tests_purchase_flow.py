import pytest

from unittest.mock import MagicMock, patch

from connect.client import ClientError
from connect.eaas.core.responses import BackgroundResponse
from connect.eaas.core.enums import ResultType
from malwarebytes.account.domain.exceptions import (
    LicenseKeyNotFound, UsersNotFound,
)
from malwarebytes.account.infrastructure.exceptions import TrialSubscriptionNotValidException
from malwarebytes.account.application.services import AccountCreator, AccountGetter, OneViewCreator

from connect_malwarebytes.flows.purchase_flow import PurchaseFlow
from connect_malwarebytes.flows.flows import ProcessingFlow
from connect_malwarebytes.connect.request import AssetsGetter

from tests import test_utils


class TestPurchaseFlow:
    @patch('time.sleep', return_value=None)
    def test_process_successful_purchase(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        AccountGetter.execute = MagicMock(return_value='')
        AssetsGetter.execute = MagicMock(return_value='')

        flow.request_data.update_parameter = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_wrong_emil_purchase(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()

        flow.update_parameters = MagicMock()

        flow.request_data.params()[0]['value'] = 'wrong_email'
        flow.client = MagicMock()

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_successful_purchase_migration_flow(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()

        # Delete Items
        flow.request_data.params()[3]['value'] = {
            'msp_account_id_fulfillment': '6564616336353830656236303235353961643766666561646439326'
                                          '566313466',
            'owner_email': 'pruebatest@prueba.com',
            'site_id': '64623763353938332D373239642D343138652D383031302D373337323836616563633163',
            'user_id': '3534653762613035623065356536383834346262333164623836376332656132',
            'vendor_id': '3133646330623936323265663735643231303236326537346634313664363430',
            'license_key': 'CBMCP-ZMRTQ-GZ8YR-C6F22',
        }

        flow.update_parameters = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_successful_purchase_migration_flow_only_mandatory_fields(self, connect_client,
                                                                              connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()

        # Delete Items
        flow.request_data.params()[3]['value'] = {
            'msp_account_id_fulfillment': '6564616336353830656236303235353961643766666561646439326'
                                          '566313466',
            'owner_email': 'pruebatest@prueba.com',
        }

        flow.update_parameters = MagicMock()
        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_wrong_msp_account_id_purchase_migration_flow(self, connect_client,
                                                                  connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        flow.client = MagicMock()

        # Delete Items
        flow.request_data.params()[3]['value'] = {
            'msp_account_id_fulfillment': '65646163363538306',
            'owner_email': 'pruebatest@prueba.com',
            'site_id': '64623763353938332D373239642D343138652D383031302D373337323836616563633163',
            'user_id': '3534653762613035623065356536383834346262333164623836376332656132',
            'vendor_id': '3133646330623936323265663735643231303236326537346634313664363430',
            'license_key': 'CBMCP-ZMRTQ-GZ8YR-C6F22',
        }

        flow.update_parameters = MagicMock()

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.FAIL

    @patch('time.sleep', return_value=None)
    def test_process_successful_purchase_import(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        existing_account = {
            'msp_account_id': '3639633938356633313134323662616561323731643839613936396137313630'}
        ProcessingFlow.check_existing_email = MagicMock(return_value=existing_account)
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')

        flow.update_parameters = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        # Clear all items and add one reservation to import.
        flow.request_data.items().clear()
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "paid",
                    "events": {
                        "created": {
                            "at": "2023-06-06T17:53:20+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-06-06T17:53:20+00:00",
                        },
                    },
                    "id": "billing",
                    "title": "Billing",
                    "description": "Billing",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "PAID",
                                "value": "paid",
                                "default": True,
                            },
                            {
                                "label": "TRIAL",
                                "value": "trial",
                            },
                        ],
                        "shared": "view",
                    },
                },
            ],
        })
        flow.request_data.params()[4][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    @patch('time.sleep', return_value=None)
    def test_process_successful_purchase_import_with_mps_accoun_id_fulfillment(self, connect_client,
                                                                               connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        existing_account = {
            "msp_account_id": "3639633938356633313134323662616561323731643839613936396137313630",
            "msp_company_name": "Bartell - Rau",
            "license_type": "paid",
            "account_status": "active",
            "test_account": True,
            "user_count": 1,
            "users": [
                {
                    "user_id": "3361333734663061343736653264386565353832633735383365633061333934",
                    "user_email": "nesta@example.com",
                    "user_firstname": "Nesta",
                    "user_lastname": "Archeron",
                    "user_status": "pending",
                },
            ],
            "site_count": 1,
            "sites": [
                {
                    "site_id": "33383631363164632D383131322D343339662D613239622D65373337306432636"
                               "2623563",
                    "nebula_id": "becfe466-2c57-4f5d-879d-f8105044115e",
                    "firstname": "Nesta",
                    "lastname": "Archeron",
                    "site_name": "Bartell - Rau",
                    "status": "active",
                },
            ],
            "nebula_account_id": "651c1627-b8ac-40dc-83c6-66037e85517b",
            "owner": {
                "email": "nesta@example.com",
                "display_name": "Nesta Archeron",
            },
            "license_key": "CB4TN-4CN99-RZZQ7-Q78PQ",
        }
        ProcessingFlow.check_existing_email = MagicMock(return_value=existing_account)
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')

        flow.update_parameters = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        flow.request_data.params()[5][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    def test_process_purchase_no_reservation_item(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        ProcessingFlow.check_existing_email = MagicMock(return_value='')
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')

        # Delete Items
        flow.request_data.items().clear()

        flow.fail_request = MagicMock()
        result = flow.process()

        assert result.status == ResultType.FAIL

    def test_process_purchase_validation_more_than_one_reservation_item(self, connect_client,
                                                                        connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        ProcessingFlow.check_existing_email = MagicMock(return_value='')
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')

        # Add Reservation Items
        flow.request_data.items().append({
            "id": "PRD_462_646_079_0002",
            "global_id": "PRD-462-646-079-0002",
            "mpn": "BUS-CLOUD",
            "old_quantity": "0",
            "quantity": "1",
            "type": "Licenses",
            "display_name": "OneView Monthly",
            "period": "Monthly",
            "item_type": "Reservation",
            "params": [
                {
                    "value": "new",
                    "events": {
                        "created": {
                            "at": "2023-04-18T16:48:00+00:00",
                            "by": {
                                "id": "UR-874-914-133",
                                "name": "Borja Rios",
                            },
                        },
                        "updated": {
                            "at": "2023-04-18T16:48:00+00:00",
                        },
                    },
                    "id": "type_item",
                    "title": "Type Item",
                    "description": "Choose if Item is to create new subscription or import "
                                   "subscription",
                    "type": "choice",
                    "scope": "item",
                    "phase": "configuration",
                    "constraints": {
                        "required": False,
                        "hidden": False,
                        "unique": False,
                        "readonly": False,
                        "choices": [
                            {
                                "label": "New Subscription",
                                "value": "new",
                                "default": True,
                            },
                            {
                                "label": "Import Subscription",
                                "value": "import",
                            },
                        ],
                        "shared": "None",
                    },
                },
            ],
        })

        flow.fail_request = MagicMock()
        result = flow.process()

        assert result.status == ResultType.FAIL

    @patch('time.sleep', return_value=None)
    def test_process_purchase_existing_email(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        existing_account = {
            'msp_account_id': '3639633938356633313134323662616561323731643839613936396137313630'}
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        ProcessingFlow.check_existing_email = MagicMock(return_value=existing_account)

        flow.update_parameters = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    @patch('time.sleep', return_value=None)
    def test_process_purchase_existing_email_in_asset_not_in_malwarebytes(self, connect_client,
                                                                          connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        asset = [test_utils.mock_asset()]
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        AccountGetter.execute = MagicMock(return_value='')
        AssetsGetter.execute = MagicMock(return_value=asset)

        flow.update_parameters = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    @patch('time.sleep', return_value=None)
    def test_process_purchase_import_not_exists_msp_account_id(self, connect_client,
                                                               connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        existing_account = {
            'msp_account_id': '5648641657684687453418694564984654864895168436548648654861486468'}
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        ProcessingFlow.check_existing_email = MagicMock(return_value=existing_account)

        flow.update_parameters = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        flow.request_data.params()[4][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    @patch('time.sleep', return_value=None)
    def test_process_successful_purchase_msp_account_id_license_key_user_id_already_created(
            self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        ProcessingFlow.check_existing_email = MagicMock(return_value='')

        # Add msp_account_id_fulfillment
        flow.request_data.params()[5][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'
        # Add license_key
        flow.request_data.params()[2]['value'] = 'CB42R-XBGGR-GXFKX-7ZHTP'
        # Add user_id
        flow.request_data.params()[7][
            'value'] = '6436666138363865613861393334623735663530653533393639396330336336'
        # Add site_id
        flow.request_data.params()[6][
            'value'] = '30663631386339642D323132332D343737322D623938662D396436313832616530303135'

        flow.update_parameters = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    @patch('time.sleep', return_value=None)
    def test_process_purchase_license_key_not_obtain(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        ProcessingFlow.check_existing_email = MagicMock(return_value='')

        flow.update_parameters = MagicMock()

        # Add msp_account_id_fulfillment
        flow.request_data.params()[5][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        # Empty license_key
        AccountGetter.get_msp_account = MagicMock(return_value={'users': '', 'license_key': ''})

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        with pytest.raises(LicenseKeyNotFound) as exception_info:
            flow.process()
        assert str(
            exception_info.value) == ('License key for MSP account ID 363963393835663331313432'
                                      '3662616561323731643839613936396137313630 not found.')

    @patch('time.sleep', return_value=None)
    def test_process_purchase_user_id_not_obtain(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        ProcessingFlow.check_existing_email = MagicMock(return_value='')

        flow.update_parameters = MagicMock()

        # Add msp_account_id_fulfillment
        flow.request_data.params()[5][
            'value'] = '3639633938356633313134323662616561323731643839613936396137313630'

        # Empty user_id
        AccountGetter.get_msp_account = MagicMock(
            return_value={'users': '', 'license_key': 'CB42R-XBGGR-GXFKX-7ZHTP'})

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        with pytest.raises(UsersNotFound) as exception_info:
            flow.process()
        assert str(
            exception_info.value) == ('Users for MSP account ID 36396339383566333131343236626165'
                                      '61323731643839613936396137313630 not found.')

    def test_process_wrong_first_name_create_account(self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        ProcessingFlow.check_existing_email = MagicMock(return_value='')

        flow.request_data.tiers()['customer']['contact_info']['contact']['first_name'] = 'a'

        flow.fail_request = MagicMock()

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS

    @patch('time.sleep', return_value=None)
    def test_process_purchase_not_template_id_to_approve_request(
            self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        ProcessingFlow.check_existing_email = MagicMock(return_value='')

        flow.update_parameters = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        flow.get_subscription_activation_template = MagicMock(return_value='')
        result = flow.process()

        assert result.status == ResultType.SUCCESS

    @patch('time.sleep', return_value=None)
    def test_process_purchase_not_right_status_in_asset(
            self, connect_client, connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock()
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        ProcessingFlow.check_existing_email = MagicMock(return_value='')

        flow.update_parameters = MagicMock()

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        flow.get_subscription_activation_template = MagicMock(side_effect=ClientError('Some Error'))

        with pytest.raises(ClientError) as exception_info:
            flow.process()
        assert str(exception_info.value) == 'Some Error'

    @patch('time.sleep', return_value=None)
    def test_process_wrong_purchase_fail_create_trial_subscription(self, connect_client,
                                                                   connect_logger):
        # Arrange
        request = test_utils.mock_purchase_request()
        flow = PurchaseFlow(request, connect_client, connect_logger, {})
        flow.logger = MagicMock()
        AccountCreator.execute = MagicMock()
        AccountGetter.get_msp_account = MagicMock()
        OneViewCreator.create_site = MagicMock()
        OneViewCreator.create_trial_subscription = MagicMock(
            side_effect=TrialSubscriptionNotValidException('Some Error'))
        ProcessingFlow.check_existing_email = MagicMock(return_value='')
        ProcessingFlow.find_email_in_assets = MagicMock(return_value='')
        AssetsGetter.execute = MagicMock(return_value='')

        flow.request_data.update_parameter = MagicMock()
        flow.request_data.items()[2]['params'][0]['value'] = 'trial'

        # Set the mock return value for client_id and client_secret
        flow.get_credentials_by_msp_account_id = MagicMock(
            return_value=('mocked_client_id', 'mocked_client_secret'))

        result = flow.process()

        # Assert
        assert isinstance(result, BackgroundResponse)
        assert result.status == ResultType.SUCCESS
