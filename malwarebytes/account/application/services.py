from typing import Optional

from malwarebytes.account.domain.contracts import AccountRepository
from malwarebytes.account.domain.models import Account, Contact, Email, MSPAccount, AccountId
from malwarebytes.account.domain.services import AccountBuilder

from malwarebytes.account.application.exceptions import MissingRequiredAccountException, \
    MissingRequiredContactException


class AccountCreator:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def execute(self, account: Account, contact: Contact) -> MSPAccount:
        if isinstance(account, Account) and isinstance(contact, Contact):
            account_to_inject = AccountBuilder.build(account, contact)

        if not account_to_inject["account"]:
            raise MissingRequiredAccountException()

        if not account_to_inject["contact"]:
            raise MissingRequiredContactException()

        return self.repository.update(account_to_inject)


class AccountGetter:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def execute(self, email: Email) -> Optional[MSPAccount]:
        return self.repository.find(email)

    def get_license(self, msp_account_id: AccountId):
        return self.repository.get_license(msp_account_id)
