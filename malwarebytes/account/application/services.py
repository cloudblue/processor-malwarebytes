from typing import Optional
from datetime import date

from malwarebytes.account.domain.contracts import (
    AccountRepository, BillingRepository, OneViewRepository,
)
from malwarebytes.account.domain.models import (
    Account, AccountBilling, AccountId, Contact, Email, MSPAccount,
)
from malwarebytes.account.domain.services import AccountBuilder
from malwarebytes.account.application.exceptions import (
    MissingRequiredAccountException, MissingRequiredContactException,
)


class OneViewCreator:
    def __init__(self, repository: OneViewRepository):
        self.repository = repository

    def create_site(self, body):
        return self.repository.create_site(body)

    def create_trial_subscription(self, site_id, body):
        return self.repository.create_trial_subscription(site_id, body)


class AccountCreator:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def execute(self, account: Account, contact: Contact, test_account: bool) -> MSPAccount:
        if isinstance(account, Account) and isinstance(contact, Contact):
            account_to_inject = AccountBuilder.build(account, contact, test_account)

        if not account_to_inject["account"]:
            raise MissingRequiredAccountException()

        if not account_to_inject["contact"]:
            raise MissingRequiredContactException()

        return self.repository.update(account_to_inject)


class AccountChange:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def change(self, msp_account_id: AccountId) -> bool:
        return self.repository.change(msp_account_id)


class AccountSuspend:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def suspend(self, msp_account_id: AccountId) -> bool:
        return self.repository.suspend(msp_account_id)


class AccountResume:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def resume(self, msp_account_id: AccountId) -> bool:
        return self.repository.resume(msp_account_id)


class AccountCancel:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def cancel(self, msp_account_id: AccountId) -> bool:
        return self.repository.cancel(msp_account_id)


class AccountSend:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def send_email(self, msp_account_id: AccountId) -> bool:
        return self.repository.send_email(msp_account_id)


class AccountGetter:
    def __init__(self, repository: AccountRepository):
        self.repository = repository

    def execute(self, email: Email) -> Optional[MSPAccount]:
        return self.repository.find(email)

    def get_msp_account(self, msp_account_id: AccountId) -> Optional[MSPAccount]:
        return self.repository.find_msp_account_id(msp_account_id)

    def get_credentials(self, msp_account_id: AccountId, msp_user_id: AccountId):
        return self.repository.get_credentials(msp_account_id, msp_user_id)


class BillingGetter:
    def __init__(self, repository: BillingRepository, logger):
        self.repository = repository
        self.logger = logger

    def execute(
            self, msp_account_id: AccountId, star_date: date, end_date: date) -> AccountBilling:
        usage = self.repository.get_usage(msp_account_id, star_date, end_date)

        return usage
