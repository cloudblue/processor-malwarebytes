from abc import ABCMeta, abstractmethod
from typing import Tuple, Union


class Authenticator(metaclass=ABCMeta):  # pragma: no cover
    """
    Authenticator contract
    """
    @abstractmethod
    def authenticate(self, grant_type: str) -> Union[str, Tuple[str, int]]:
        pass


class Logger(metaclass=ABCMeta):  # pragma: no cover
    @abstractmethod
    def debug(self, msg, *args, **kwargs):
        pass

    @abstractmethod
    def info(self, msg, *args, **kwargs):
        pass

    @abstractmethod
    def warning(self, msg, *args, **kwargs):
        pass

    @abstractmethod
    def error(self, msg, *args, **kwargs):
        pass

    @abstractmethod
    def critical(self, msg, *args, **kwargs):
        pass
