from abc import ABCMeta, abstractmethod
from datetime import date
from typing import Optional

from malwarebytes.account.domain.models import (
    AccountBilling, AccountId, AccountToInject, Email, MSPAccount,
)


class AccountRepository(metaclass=ABCMeta):

    @abstractmethod
    def find(self, email: Email) -> Optional[MSPAccount]:
        """
        Find account by its email.

        Parameters
        ----------
        email: Email
            The Email to find.

        Returns
        -------
        Account
            Account found.

        Raises
        ------
        NotFoundError
            If the account is not found.
        """
        pass  # pragma: no cover

    @abstractmethod
    def find_msp_account_id(self, msp_account_id: AccountId) -> Optional[MSPAccount]:
        """
        Find account by its email.

        Parameters
        ----------
        msp_account_id: AccountId
            The MSP Account ID to find.

        Returns
        -------
        MSP Account
            Account found.

        Raises
        ------
        NotFoundError
            If the account is not found.
        """
        pass  # pragma: no cover

    @abstractmethod
    def update(self, account: AccountToInject) -> MSPAccount:
        """
        Updates or create an account.

        Parameter
        ---------
        account: Account
            The account to update or create.

        Returns
        -------
        MSPAccount
            MalwareBytes Account updated or created.
        """
        pass  # pragma: no cover

    @abstractmethod
    def get_credentials(self, msp_account_id: AccountId, msp_user_id: AccountId) -> MSPAccount:
        """
        Get Credentials to create new Site and Trial Subscription.

        Parameter
        ---------
        msp_account_id: AccountId
            The msp account id created.

        msp_user_id: AccountId
            The msp user id created.

        Returns
        -------
        MSPAccount
            MalwareBytes Account created.
        """
        pass  # pragma: no cover

    @abstractmethod
    def cancel(self, msp_account_id: AccountId) -> bool:
        """
        Cancel an account.

        Parameter
        ---------
        msp_account_id: AccountId
            The msp account id to cancel.

        Returns
        -------
        MSPAccount
            MalwareBytes Account canceled.
        """
        pass  # pragma: no cover

    @abstractmethod
    def suspend(self, msp_account_id: AccountId) -> bool:
        """
        Suspend an account.

        Parameter
        ---------
        msp_account_id: AccountId
            The msp account id to suspend.

        Returns
        -------
        MSPAccount
            MalwareBytes Account suspended.
        """
        pass  # pragma: no cover

    @abstractmethod
    def resume(self, msp_account_id: AccountId) -> bool:
        """
        Resume an account.

        Parameter
        ---------
        msp_account_id: AccountId
            The msp account id to resume.

        Returns
        -------
        MSPAccount
            MalwareBytes Account resumed.
        """
        pass  # pragma: no cover

    @abstractmethod
    def send_email(self, msp_account_id: AccountId) -> bool:
        """
        Resend invite Email.

        Parameter
        ---------
        msp_account_id: AccountId
            The msp account id to cancel.

        Returns
        -------
        """
        pass  # pragma: no cover


class OneViewRepository(metaclass=ABCMeta):

    @abstractmethod
    def create_site(self, body):
        """
        Create Site for a MSP Account ID

        Parameter
        ---------
        body
            The body to API Call.
        """
        pass  # pragma: no cover

    @abstractmethod
    def create_trial_subscription(self, msp_account_id: AccountId, site_id, body):
        """
        Create Trial Subscription for a MSP Account ID

        Parameter
        ---------
        msp_account_id: AccountId
            The msp account id to create trial Subscription.

        site_id
            The site id created.

        body
            The body to API Call.
        """
        pass  # pragma: no cover


class BillingRepository(metaclass=ABCMeta):

    @abstractmethod
    def get_usage(
            self, msp_account_id: AccountId, start_date: date, end_date: date) -> AccountBilling:
        """
        Get usage per Account
        :param start_date:
        :param end_date:
        :param msp_account_id:
        :return:
        """
        pass  # pragma: no cover
