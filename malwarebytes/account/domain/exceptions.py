from __future__ import annotations

from typing import Optional


class MalwareBytesException(Exception):
    def __init__(
            self,
            message: str,
            code: Optional[str] = None,
            additional_information: Optional[dict] = None,
    ):
        if additional_information is None:
            additional_information = {}
        self.message = message
        self.code = code
        self.additional_information = additional_information

        super().__init__(self.message)

    def __str__(self):
        return ''.join([
            f"#{self.code} " if self.code else "",
            f"{self.message}",
        ])


class MalwareBytesServerException(MalwareBytesException):
    """A 500 error from Zoom API"""

    @property
    def response(self):
        return self.additional_information.get('response')


class MBClientException(MalwareBytesException):
    """A 400 <= error < 500 from Zoom API request"""

    def is_email_blocked(self) -> bool:
        return self.code == '1107'

    def is_email_already_used(self) -> bool:
        return self.code == '1005'


class ConnectionTimeoutException(MalwareBytesException):
    """A 408 error from Zoom API request"""


class AuthenticationException(MalwareBytesException):
    """An Authentication error from Zoom API request"""


class LimitExceeded(MalwareBytesException):
    """A contact info exception"""
