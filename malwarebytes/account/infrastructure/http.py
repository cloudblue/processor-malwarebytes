from __future__ import annotations

import json
import base64
from abc import ABC
from typing import Optional

import requests
from requests import Response

from malwarebytes.account.domain.contracts import AccountRepository, Account

from malwarebytes.account.infrastructure.exceptions import (
    AccountDataNotValidException, AccountExistingEmailException, ConnectionUnauthorizedException,
    LimitExceeded, AuthenticationException, MBClientException, ConnectionTimeoutException,
    MalwareBytesException, MalwareBytesServerException,
)
from malwarebytes.account.domain.models import MSPAccount, Email, AccountToInject, AccountCreated
from malwarebytes.account.application.contracts import Logger
from malwarebytes.account.infrastructure.logger import (
    formatter_api_request,
    formatter_api_response,
)

ACCOUNT_DATA_NOT_VALID = 400
ACCOUNT_DATA_ALREADY_EXIST = 409
CONNECTION_UNAUTHORIZED = 401

ACCOUNT_CREDENTIALS = 'account_credentials'


class APIClient:
    """
    API Client to performs the API calls
    """

    def __init__(
            self,
            mb_oauth_url: str,
            mb_oauth_client_id: str,
            mb_oauth_client_secret: str,
            mb_api_url: str,
            logger: Logger,
            max_retries: int = 3,
    ):
        """
       Parameters
       ----------
       mb_oauth_url: str
           OAUTH URL.
       mb_oauth_client_id: str
           Client ID.
       mb_oauth_client_secret: str
           Client Secret.
       mb_api_url: str
           API URL used for send the requests
       logger: Logger

       """
        self.logger = logger
        self.mb_oauth_url = mb_oauth_url
        self.mb_oauth_client_id = mb_oauth_client_id
        self.mb_oauth_client_secret = mb_oauth_client_secret
        self.host = mb_api_url
        self.max_retries = max_retries

    def send(
            self,
            method: str,
            path: str,
            query: Optional[dict] = None,
            body: Optional[dict] = None,
    ) -> Response:
        """
        Sends a requests to MalwareBytes API.

        Parameters
        ----------
        method: str
            The HTTP method to use.

        path: str, None
            The path to the resource.

        query: dict, optional
            The parameters of the requests to be sent.

        body: dict, optional
            The body of the requests to be sent.

        Returns
        -------
        response: Response
            The response
        """

        retries = 0
        success = False

        while retries < self.max_retries and not success:
            retries += 1
            try:
                token = self.get_token()
                headers = {
                    'Authorization': f"Bearer {token}",
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                }
                self.logger.info(formatter_api_request(method, self.get_url(path), headers, body))

                try:
                    response = requests.request(
                        method,
                        self.get_url(path),
                        headers=headers,
                        params=query,
                        json=body,
                        verify=True,
                        timeout=(180, 540),
                    )
                except ConnectionError as e:
                    raise ConnectionTimeoutException(str(e))

                self.logger.info(formatter_api_response(response))

                if response.status_code >= 500:
                    raise _make_server_error(response)

                if response.status_code >= 400:
                    raise _make_client_error(response)

                success = True
                return response.content
            except AuthenticationException as e:
                self.logger.warning("{error} with message {msg} retrying {retries}/{max}".format(
                    error=e.__class__.__name__,
                    msg=e,
                    retries=retries,
                    max=self.max_retries,
                ))
                # Flush the token in cache so next retry fetch a new one
                self.oauth_client.flush_session()

                if retries == self.max_retries:
                    raise

    def get_url(self, action_path: str):
        """
        Creates the URL to the resource for the requests.

        Parameters
        ----------
        action_path: str
            The path to the resource. It should start with a slash.
        """
        return f'{self.host}{action_path}'

    def get_token(self):
        """
        Get Token.
        """

        base64_str = base64.b64encode(
            bytes(self.mb_oauth_client_id + ':' + self.mb_oauth_client_secret, 'utf-8')
        )
        base64_authorization = base64_str.decode('utf-8')

        token_url = self.mb_oauth_url + '/oauth2/token'
        payload = 'scope=oneview-partner&grant_type=client_credentials'
        headers = {'Content-Type': 'application/x-www-form-urlencoded',  # specific to my app
                   'Authorization': 'Basic ' + base64_authorization,
                   }

        response = requests.post(token_url, headers=headers, data=payload)

        if response.status_code == 200:
            token_data = json.loads(response.content)
            access_token = token_data["access_token"]
            self.logger.info(f"Access Token was: {access_token}")
        else:
            self.logger.error(f"There was an error try to get Access Token. Error Code: "
                              f"{response.status_code}")
            raise AuthenticationException

        return access_token


def _make_server_error(response: Response) -> MalwareBytesException:
    """
    Makes a Server Error Exception (error >= 500)
    Parameters
    ----------
    response: Response
        Response from Zoom API
     Returns
    -------
        The MalwareBytesException.
    """
    return MalwareBytesServerException(response.text, str(response.status_code), {
        'response': response,
    })


def _make_client_error(response: Response) -> MalwareBytesException:
    """
    Makes a Client Error Exception (400 <= error < 500)
    Parameters
    ----------
    response: Response
        Response from MalwareBytes API
     ReturnsF
    -------
        The MalwareBytesException.
    """
    body = response.json()
    message = body.get("message", response.reason)
    code = str(body.get("code", str(response.status_code)))

    # Throttling limit is 360 calls per minute.
    # When the limit is reached the API server will respond with a 429 HTTP status code.
    if code in ['429']:
        return LimitExceeded(message, code)
    elif response.status_code == 401:
        return AuthenticationException(message, code)

    return MBClientException(message, code, {
        'response': response,
    })


class MBAccountRepository(AccountRepository, ABC):
    def __init__(self, api_client: APIClient, logger=None) -> None:
        self.api_client = api_client
        self.logger = logger

    def find(self, email: Email) -> Optional[MSPAccount]:

        # Gets basic Group data
        accounts_list = self.api_client.send("GET", "/api/v2/partners/oneview/accounts")

        accounts_dict = json.loads(accounts_list)
        msp_accounts = accounts_dict['msp_accounts']

        for msp_account in msp_accounts:
            for user in msp_account.get('users'):
                if email.value == user.get('user_email'):
                    self.logger.info(f"Account with {email.value} found.")
                    return msp_account

        self.logger.info(f"Account with {email.value} does not exist")
        return None

    def update(self, account: AccountToInject) -> MSPAccount:

        email = Email(account["contact"]["contact_email"])

        mb_account = self.find(email)
        if mb_account:
            return account

        account = self._create_account(account)
        return account

    def _create_account(self, account: Account) -> AccountCreated:
        """
        Creates a new Account in MalwareBytes

        Parameters
        ----------
        account: Account
            The Account to create in MalwareBytes

        return: MSPAccount
            The Account created in MalwareBytes
        """

        response = self.api_client.send("POST", "/api/v2/partners/oneview/accounts", body=account)

        '''
        statusCode= 400; error= Bad Request
        statusCode= 401; error= Unauthorized
        statusCode= 409; error= Conflict; message= "Email already in use in Malwarebytes"
        '''
        response = json.loads(response)

        if response.get("statusCode"):
            if response.get("statusCode") == ACCOUNT_DATA_NOT_VALID:
                self.logger.error(
                    f"It was not possible to create the Account {response['message']}")
                raise AccountDataNotValidException(response)
            elif response.get("statusCode") == ACCOUNT_DATA_ALREADY_EXIST:
                self.logger.error(
                    f'Account with Email {account["contact"]["contact_email"]} already '
                    f'exists')
                raise AccountExistingEmailException(response['message'])
            elif response["statusCode"] == CONNECTION_UNAUTHORIZED:
                self.logger.error(
                    'It was not possible to connect API MalwareBytes, please review your '
                    'credentials.')
                raise ConnectionUnauthorizedException(response['message'])

        self.logger.info(f"Account {response['account_id']} created")
        return response
