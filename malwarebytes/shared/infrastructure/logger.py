"""Logger module"""
from __future__ import annotations

from copy import deepcopy
from typing import Any, Dict, List, Tuple, Union

from requests import JSONDecodeError, Response

from malwarebytes.shared.application.contracts import Logger

__masked_fields: Tuple[str] = ()
__masked_params: Tuple[str] = ()


def masked_fields(fields: Union[List[str], Tuple[str]]) -> None:
    """
    Set fields to mask on mask_fields call. (BE CAREFUL THIS IS GLOBAL!)
    @param fields: The fields keys to be masked
    @return: None
    """
    global __masked_fields
    __masked_fields = tuple(fields)


def mask_fields(data: Union[Dict, List, Tuple, Any]) -> Union[Dict, List, Tuple, Any]:
    """
    Mask fields, this uses the global __masked_fields to identify the fields to mask.
    @param data: Only if a dictionary is given, the fields will be masked
    @return: The data
    """
    if isinstance(data, dict):
        return __mask_dict(data)
    elif isinstance(data, (list, tuple)):
        return [mask_fields(x) for x in data]
    else:
        return data


def __mask_dict(data: Dict) -> Dict:
    """
    Masks a dictionary
    @param data: The dictionary to mask.
    @return: The dictionary
    """
    data = deepcopy(data)
    for k in data.keys():
        if k in __masked_fields:
            data[k] = '*' * 8
    for k in data.keys():
        data[k] = mask_fields(data[k])
    return data


def formatter_api_request(method: str, path: str, headers: dict, body: dict):
    """
    Formate the API request to logger
    @param method: API method used to send the request
    @param path: The path for the API request
    @param headers: The header sent to the API request
    @param body: The body send to the API request
    @return: None
    """
    set_masked_fields()
    header_masked = mask_fields(headers)
    body_masked = mask_fields(body)
    msg = f'Request {method} {path}'
    for key, value in header_masked.items():
        msg += f" > {key}: {value}"

    if body is not None:
        msg += f"  {body_masked}"

    return msg


def formatter_api_response(response: Response):
    """
    Formate the API response to logger
    @param response: Response. The response to format
    @return: None
    """
    set_masked_fields()
    header_masked = mask_fields(response.headers)
    text_masked = mask_fields(response.text)
    msg = f'Response {response.status_code}'
    if response.reason:
        msg += f' {response.reason}'

    msg += f' on {response.request.method} {response.request.path_url}'
    for key, value in header_masked.items():
        msg += f" < {key}: {value}"

    try:
        msg += f"  {mask_fields(response.json())}"
    except JSONDecodeError:
        if response.text is not None:
            msg += f"  {text_masked}"

    msg += f" {response.elapsed.total_seconds() * 1000} ms"
    return msg


def set_masked_fields():
    """Initialize masked fields"""
    masked_fields([
        'Authorization',
        'token',
        'password',
        'access_token',
    ])
